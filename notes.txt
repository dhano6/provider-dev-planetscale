# !!! windows wsl - cannot have spaces in dir names/path !!!!!!!!!


# https://github.com/crossplane/provider-template
# Use this template


# !!! when cloning on windows
git config --global core.autocrlf false
git clone https://github.com/dhano6/provider-dev-planetscale.git
# later then turn it back on
git config --global core.autocrlf true


cd provider-dev-planetscale

# get useful upbound utilities
make submodules

# replace all template names occurencies with name PlanetScale
make provider.prepare provider=PlanetScale

# add Database Kind under Database group (something like Instance kind under ec2 group)
make provider.addtype provider=PlanetScale group=Database kind=Database

# add Password Kind under Branch group 
make provider.addtype provider=PlanetScale group=Branch kind=Password

# register new APIs manually
# apis/planetscale.go
# internal/controller/planetscale.go

# generate some functions e.g. deepcopy, managed to satisfy XRM
make generate

# look up planet scale go-client in internet
# https://github.com/planetscale/planetscale-go

# put into apis/database/v1alpha1/database_types.go --> DatabaseParameters struct and modify accordingly
https://github.com/planetscale/planetscale-go/blob/main/planetscale/databases.go
type CreateDatabaseRequest struct {
	Organization string
	Name         string `json:"name"`
	Notes        string `json:"notes,omitempty"`
	Region       string `json:"region,omitempty"`
}


# take some of these into DatabaseObservation struct
type Database struct {
	Name      string        `json:"name"`
	Notes     string        `json:"notes"`
	Region    Region        `json:"region"`
	State     DatabaseState `json:"state"`
	HtmlURL   string        `json:"html_url"`
	CreatedAt time.Time     `json:"created_at"`
	UpdatedAt time.Time     `json:"updated_at"`
}


# internal/controller/database/database.go
# replace text occurences of NoOpService with PlanetScaleService

# get go client
go get github.com/planetscale/planetscale-go/planetscale

# install planetscale cli
# find access token in ~/.config/planetscale

# implement client for external service

....

# mkdir package/crds

# go mod tidy

make generate

kubectl apply -f package/crds

# run controller
make run

# how to find token
	# install pscale cli then:
	# pscale auth login
	# cat ~/.config/planetscale/access-token

k apply -f examples/provider/pscale-token-secret.yaml

k apply -f examples/provider/config.yaml

k apply -f examples/database/database.yaml

k get database